{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nimport type {\n  BarcodeScannerPlugin,\n  ReadBarcodeFromBase64,\n  IsGoogleBarcodeScannerModuleAvailableResult,\n  IsSupportedResult,\n  IsTorchAvailableResult,\n  IsTorchEnabledResult,\n  PermissionStatus,\n  ReadBarcodesFromImageOptions,\n  ReadBarcodesFromImageResult,\n  ScanResult,\n  StartScanOptions,\n} from './definitions';\nexport declare class BarcodeScannerWeb\n  extends WebPlugin\n  implements BarcodeScannerPlugin\n{\n  startScan(_options?: StartScanOptions): Promise<void>;\n  stopScan(): Promise<void>;\n  readBarcodesFromImage(\n    _options: ReadBarcodesFromImageOptions,\n  ): Promise<ReadBarcodesFromImageResult>;\n  readBarcodeBase64(\n    _options: ReadBarcodeFromBase64,\n  ): Promise<ReadBarcodesFromImageResult>;\n  scan(): Promise<ScanResult>;\n  isSupported(): Promise<IsSupportedResult>;\n  enableTorch(): Promise<void>;\n  disableTorch(): Promise<void>;\n  toggleTorch(): Promise<void>;\n  isTorchEnabled(): Promise<IsTorchEnabledResult>;\n  isTorchAvailable(): Promise<IsTorchAvailableResult>;\n  openSettings(): Promise<void>;\n  isGoogleBarcodeScannerModuleAvailable(): Promise<IsGoogleBarcodeScannerModuleAvailableResult>;\n  installGoogleBarcodeScannerModule(): Promise<void>;\n  checkPermissions(): Promise<PermissionStatus>;\n  requestPermissions(): Promise<PermissionStatus>;\n  private createUnavailableException;\n}\n"]}